name: my-bloody-sonar
on:
  schedule:
    - cron: '0 3 1 * *'
  push:
    branches:
      - develop
      - feature/*
      - main
    tags:
      - 'v*'
    paths-ignore:
      - README.md
  pull_request:
    branches:
      - main
  release:
    types: [published]

env:
  push_to_registry: true

jobs:

  getVersion:
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        if: ${{ github.event.release.published  == true }}
        with:
          # Optionally strip `v` prefix
          strip_v: true

      - name: 'Get latest tag'
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
        if: ${{ steps.tag.outputs.tag == null }}
        with:
          semver_only: true
        
      - name: 'strip_v'
        id: version
        if: ${{ steps.get-latest-tag.outputs.tag != null }}
        run: VERSION=${{ steps.get-latest-tag.outputs.tag }}; echo ::set-output name=version::${VERSION:1}

      - name: 'conditions check'
        run: echo ${{ steps.version.outputs.version || steps.tag.outputs.tag }}

    outputs:
      version: ${{ steps.version.outputs.version || steps.tag.outputs.tag }}

  test:
    needs: getVersion
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release: [ community, developer, enterprise ]
        version: [ lts, "${{ needs.getVersion.outputs.version }}" ]

    steps:
      - name: Setup BATS
        uses: mig4/setup-bats@v1

      - uses: actions/checkout@v2

      - name: test test-${{ matrix.version != '' && format('{0}-{1}',matrix.version, matrix.release) || format('{0}', matrix.release) }}
        run: make test VERSION=${{ matrix.version != '' && format('{0}-{1}',matrix.version, matrix.release) || format('{0}', matrix.release) }}

  publish-images:
    needs: [ test, getVersion ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release: [ community, developer, enterprise ]
        version: [ lts, "${{ needs.getVersion.outputs.version }}" ]
#    if: ${{ github.event.release.published == true }}
    steps:
      - uses: actions/checkout@v2

      - name: Login to Packages Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/mslipets/my-bloody-sonar
            mslipets/my-bloody-sonar
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=${{ matrix.version != '' && format('{0}-{1}', matrix.version, matrix.release) || matrix.release }}
            type=sha           

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: ${{ env.push_to_registry }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: FROM_TAG=${{ matrix.version != '' && format('{0}-{1}', matrix.version, matrix.release) || matrix.release }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

#      Disabled due to https://github.com/docker/hub-feedback/issues/1927
#      untill resolution to https://github.com/docker/roadmap/issues/115 implemented.
#      - name: Update repo description
#        uses: christian-korneck/update-container-description-action@v1
#        env:
#          DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
#          DOCKER_PASS: ${{ secrets.DOCKERHUB_TOKEN }}
#        with:
#          destination_container_repo: mslipets/my-bloody-sonar
#          provider: dockerhub
#          short_description: 'Self Configured SonarQube Docker image based on Official SonarSource Images'
#          readme_file: 'README.md'
